version: '3.4'

services:
    api1:
        image: ${DOCKER_REGISTRY-}api
        build:
            context: .
            dockerfile: sample/API/Dockerfile
        volumes: 
            - ./logs/log.txt:/app/log.txt
        depends_on: 
            - consul1
            - consul2
            - consul3
            - consul4
        environment:
            - ASPNETCORE_ENVIRONMENT=Development
            - ASPNETCORE_URLS=http://+:80
            - LOG_PATH=/app/log.txt
        ports:
            - 8081:80
        networks:
            - network
    api2:
        image: ${DOCKER_REGISTRY-}api
        build:
            context: .
            dockerfile: sample/API/Dockerfile
        depends_on: 
            - consul1
            - consul2
            - consul3
            - consul4
        volumes: 
            - ./logs/log.txt:/app/log.txt
        environment:
            - ASPNETCORE_ENVIRONMENT=Development
            - ASPNETCORE_URLS=http://+:80
            - LOG_PATH=/app/log.txt
        ports:
            - 8082:80
        networks:
            - network

    api3:
        image: ${DOCKER_REGISTRY-}api
        build:
            context: .
            dockerfile: sample/API/Dockerfile
        depends_on: 
            - consul1
            - consul2
            - consul3
            - consul4
        environment:
            - ASPNETCORE_ENVIRONMENT=Development
            - ASPNETCORE_URLS=http://+:80
            - LOG_PATH=/app/log.txt
        volumes: 
            - ./logs/log.txt:/app/log.txt
        ports:
            - 8083:80
        networks:
            - network


    api4:
        image: ${DOCKER_REGISTRY-}api
        build:
            context: .
            dockerfile: sample/API/Dockerfile
        depends_on: 
            - consul1
            - consul2
            - consul3
            - consul4
        environment:
            - ASPNETCORE_ENVIRONMENT=Development
            - ASPNETCORE_URLS=http://+:80
            - LOG_PATH=/app/log.txt
        volumes: 
            - ./logs/log.txt:/app/log.txt
        ports:
            - 8084:80
        networks:
            - network

    api5:
        image: ${DOCKER_REGISTRY-}api
        build:
            context: .
            dockerfile: sample/API/Dockerfile
        volumes: 
            - ./logs/log.txt:/app/log.txt        
        depends_on: 
            - consul1
            - consul2
            - consul3
            - consul4
        environment:
            - ASPNETCORE_ENVIRONMENT=Development
            - ASPNETCORE_URLS=http://+:80
            - LOG_PATH=/app/log.txt
        ports:
            - 8085:80
        networks:
            - network

    api6:
        image: ${DOCKER_REGISTRY-}api
        build:
            context: .
            dockerfile: sample/API/Dockerfile
        volumes: 
            - ./logs/log.txt:/app/log.txt
        depends_on: 
            - consul1
            - consul2
            - consul3
            - consul4
        environment:
            - ASPNETCORE_ENVIRONMENT=Development
            - ASPNETCORE_URLS=http://+:80
            - LOG_PATH=/app/log.txt
        ports:
            - 8086:80
        networks:
            - network

    consul1:
        image: consul:1.9.5
        container_name: consul-node1
        command: agent -server -bootstrap-expect=3 -node=consul-node1 -bind=0.0.0.0 -client=0.0.0.0 -datacenter=dc1
        networks:
            - network
        expose: 
            - 8500
        restart: always

    consul2:
        image: consul:1.9.5
        container_name: consul-node2
        command: agent -server -retry-join=consul-node1 -node=consul-node2 -bind=0.0.0.0 -client=0.0.0.0 -datacenter=dc1
        depends_on:
            - consul1
        expose: 
            - 8500
        networks:
            - network
        restart: always

    consul3:
        image: consul:1.9.5
        container_name: consul-node3
        command: agent -server -retry-join=consul-node1 -node=consul-node3 -bind=0.0.0.0 -client=0.0.0.0 -datacenter=dc1
        expose: 
            - 8500
        depends_on:
            - consul1
        networks:
            - network
        restart: always

    consul4:
        image: consul:1.9.5
        container_name: consul-node4
        command: agent -retry-join=consul-node1 -node=consul-node4 -bind=0.0.0.0 -client=0.0.0.0 -datacenter=dc1 -ui 
        ports:
            - 8500:8500
        depends_on:
            - consul2
            - consul3
        networks:
            - network
        restart: always

networks:
    network:
        driver: bridge